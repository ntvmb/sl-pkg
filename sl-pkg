#!/bin/bash

START_PWD=$(pwd)
BINNAME=$(basename $0)
DRY_RUN=false
HAS_SPECIFIED_COMMAND=false
COMMAND=
CACHE_DIR=.
USR_CACHE_DIR=.
DOWNLOAD_AND_BUILD=false
RUN_HELP=false
CONFIGFILE=/etc/sl-pkg.conf
PACKAGES=()
DEPENDENCIES=()
MIRROR=.
PACKAGES_DB=packages.db
VERSION=0.0.4
ABSOLUTE_VERSION=4
BOOTSTRAP_VERSION=12.2
EDITOR=vim
TRUST_ALL=false
KEEP_GOING=false
FORCE_INSTALL=false
export MAKEFLAGS="-j$(nproc)"

print_help() {
  case $1 in
    *)
      echo "\
Usage: $BINNAME [options] command
Commands:
  install: install packages
  download: download packages
  remove: remove packages
  update: update system (not implemented)
  version: print version information and exit
  detect: detect untracked packages
  bootstrap: deploy an LFS system"
      ;;
  esac
}

# a more secure source command that doesn't allow for arbitrary command execution
source_s() {
  while read p; do
    case $p in
      *'$('*|*\;*|*\&*|*\|*)
        echo "error: bad config line $p"
        exit 1
        ;;
      *=*)
        # filter through declare to prevent ACE
        eval "declare -g $(cut -d'=' -f1<<<$p)=$(cut -d'=' -f2<<<$p)"
        if [ $? -ne 0 ]; then
          echo "error: bad config line $p"
          exit 1
        fi
        ;;
      \#*)
        ;;
      *)
        echo "error: bad config line $p"
        exit 1
        ;;
    esac
  done <$1
  unset p
}

create_cache_dir() {
  if [ ! -d "$1" ]; then
    if [ -a "$1" ]; then
      echo "error: $CACHE_DIR already exists and is not a directory"
      exit 1
    else
      mkdir -p $1
      if [ $? -ne 0 ]; then
        echo "fatal: cannot create cache directory"
        echo "note: if this is your first time using sl-pkg, you must first"
        echo "run $BINNAME first_run as root."
        exit 1
      fi
    fi
  fi
}

# PACKAGE files can be malicious; it's important to ensure they aren't before
# letting sl-pkg continue.
ask_to_inspect() {
  if [ "$TRUST_ALL" = "true" ]; then
    return 0
  fi
  PKG="$1"
  read -p "inspect PACKAGE file for $PKG? (highly recommended) " yn
  case $yn in
    [Yy]*)
      less PACKAGE
      read -p "continue operations? " yn2
      case $yn2 in
        [Yy]*)
          return 0
          ;;
        *)
          return 1
          ;;
      esac
      ;;
    *)
      return 0
      ;;
  esac
}

get_pkginfo() {
  PKG="$1"
  mkdir $PKG &>/dev/null
  cd $PKG
  # curl works better than wget in my experience
  curl -sOL "$MIRROR/$PKG/PACKAGE"
  if [ ! -f PACKAGE ]; then
    cd ..
    rm -rf $PKG
    echo "error: cannot find package $PKG"
    return 1
  fi
}

# NOTE: for future use
compare_versions() {
    if [[ $1 == $2 ]]; then
        return 0
    fi
    local IFS=.
    # replace dashes with dots
    local i ver1=$(sed "s/-/./g" <<<$1) ver2=$(sed "s/-/./g" <<<$2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++)); do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++)); do
        if ((10#${ver1[i]:=0} > 10#${ver2[i]:=0})); then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]})); then
            return 2
        fi
    done
    return 0
}

download_pkg() {
  if [ "$METAPACKAGE" = "true" ]; then
    return 0
  fi
  if [ $VERSION = "git" ]; then
    git clone --recursive $URL $NAME-git-$ABOSULTE_VERSION || (
      cd $NAME-git-$ABOSULTE_VERSION && git pull
    )
    if [ $? -ne 0 ]; then
      echo "error: failed to clone/update git repository for $1 (is git installed?)"
      return 1
    fi
    cd ..
  else
    curl -OL $URL
    local FILENAME="$(basename -- $URL)"
    local EXTENSION="${FILENAME##*.}"
    local FILENAME="${FILENAME%.*}"
    # ensure a consistent naming convention
    mv "$(basename -- $URL)" "$NAME-$VERSION.tar.$EXTENSION"
    for PATCH in ${PATCHES[@]}; do
      curl -OL $PATCH
    done
    if [ $? -ne 0 ]; then
      echo "error: failed to download package $1"
      return 1
    fi
  fi
}

build_pkg() {
  if [ "$METAPACKAGE" = "true" ]; then
    return 0
  fi
  if [ $VERSION = "git" ]; then
    cd $NAME-git-$ABOSULTE_VERSION
  else
    mkdir -p $NAME-$VERSION
    cd $NAME-$VERSION
    tar xf ../$NAME-$VERSION.tar* --no-same-owner --strip-components=1
  fi
  prepare || return 1
  build || return 1
}

install_pkg() {
  PKG="$1"
  do_install || return 1
  postinst || return 1
  # $0 detect ${DEPENDS[@]}
  if [ -z "$(sqlite3 $INSTALLED_PACKAGES_DB <<<"SELECT Name FROM InstalledPackages WHERE Name='$PKG';")" ]; then
    sqlite3 $INSTALLED_PACKAGES_DB <<<"
    INSERT INTO InstalledPackages VALUES (
      '$PKG', '$VERSION', $ABSOLUTE_VERSION, '$(date -uI)'
    );
    "
  else
    sqlite3 $INSTALLED_PACKAGES_DB <<<"
    UPDATE InstalledPackages
    SET Version='$VERSION', AbsoluteVersion='$ABSOLUTE_VERSION'
    WHERE Name='$PKG';
    "
  fi
}

download_cmd() {
  if [ ${#PACKAGES[@]} -eq 0 ]; then
    echo "error: no packages specified"
    return 1
  fi
  for PKG in ${PACKAGES[@]}; do
    cd $USR_CACHE_DIR
    get_pkginfo $PKG || return 1
    ask_to_inspect $PKG || return 1
  done
  for PKG in ${PACKAGES[@]}; do
    cd $USR_CACHE_DIR/$PKG
    source PACKAGE
    cd $START_PWD
    download_pkg $PKG || return 1
    if [ $DOWNLOAD_AND_BUILD = "true" ]; then
      build_pkg $PKG || return 1
    fi
  done
  cd $START_PWD
  return 0
}

install_cmd() {
  if [ $EUID -ne 0 ]; then
    echo "error: this command must be run as root"
    return 1
  fi
  if [ ${#PACKAGES[@]} -eq 0 ]; then
    echo "error: no packages specified"
    return 1
  fi
  for PKG in ${PACKAGES[@]}; do
    cd $CACHE_DIR
    get_pkginfo $PKG || return 1
    ask_to_inspect $PKG || return 1
  done
  for PKG in ${PACKAGES[@]}; do
    cd $CACHE_DIR/$PKG
    source PACKAGE
    download_pkg $PKG || return 1
    build_pkg $PKG || 
    if [ "$FORCE_INSTALL" != "true" ]; then
      return 1
    fi
    install_pkg $PKG || return 1
  done
  cd $START_PWD
  return 0
}

detect_cmd() {
  if [ $EUID -ne 0 ]; then
    echo "error: this command must be run as root"
    return 1
  fi
  if [ ${#PACKAGES[@]} -eq 0 ]; then
    echo "error: detecting all packages is not yet implemented"
    return 1
  fi
  for PKG in ${PACKAGES[@]}; do
    cd $CACHE_DIR
    get_pkginfo $PKG || return 1
    ask_to_inspect $PKG || return 1
  done
  DETECTION_STATUSES=()
  for PKG in ${PACKAGES[@]}; do
    cd $CACHE_DIR/$PKG
    source PACKAGE
    detect
    if [ $? -eq 0 ]; then
      echo "$PKG version $VERSION is installed"
      if [ -z "$(sqlite3 $INSTALLED_PACKAGES_DB <<<"SELECT Name FROM InstalledPackages WHERE Name='$PKG';")" ]; then
        sqlite3 $INSTALLED_PACKAGES_DB <<<"
        INSERT INTO InstalledPackages VALUES (
          '$PKG', '$VERSION', $ABSOLUTE_VERSION, '$(date -uI)'
        );
        "
      fi
      DETECTION_STATUSES+=(0)
    else
      echo "$PKG is not installed"
      if [ -n "$(sqlite3 $INSTALLED_PACKAGES_DB <<<"SELECT Name FROM InstalledPackages WHERE Name='$PKG';")" ]; then
        sqlite3 $INSTALLED_PACKAGES_DB <<<"
        DELETE FROM InstalledPackages WHERE Name='$PKG';
        "
      fi
      DETECTION_STATUSES+=(1)
    fi
  done
  if [[ " ${DETECTION_STATUSES[@]} " =~ " 1 " ]]; then
    return 1
  else
    return 0
  fi
}

bootstrap() {
  if [ $EUID -ne 0 ]; then
    echo "error: this command must be run as root"
    return 1
  fi
  TRUST_ALL=true
  TARGET="${PACKAGES[0]}"
  if [ ! -d "$TARGET" ]; then
    echo "error: $TARGET does not exist or is not a directory"
  fi
  if ! mountpoint -q "$TARGET"; then
    echo "warning: $TARGET is not a mountpoint"
  fi
  PACKAGES=()
  cd $CACHE_DIR
  curl -fsOL "$MIRROR/base-$BOOTSTRAP_VERSION/RELEASE" || (
    echo "error: cannot find release $BOOTSTRAP_VERSION"
    return 1
  )
  source_s RELEASE
  curl -sOL "$MIRROR/base-$BOOTSTRAP_VERSION/$WITH_PACKAGES"
  echo "Downloading base tarball..."
  curl -OL "$URL"
  echo "Extracting..."
  tar -C $TARGET -xf "$(basename "$URL")" || (
    echo "error: failed to extract the base system"
    return 1
  )
  echo "Preparing chroot environment..."
  mkdir -p "$TARGET"/{dev,proc,sys,run}
  mount --bind /dev "$TARGET/dev"
  mount -t devpts devpts -o gid=5,mode=0620 "$TARGET/dev/pts"
  mount -t proc proc "$TARGET/proc"
  mount -t sysfs sysfs "$TARGET/sys"
  mount -t tmpfs tmpfs "$TARGET/run"
  if [ -h "$TARGET/dev/shm" ]; then
    install -d -m 1777 "$TARGET$(realpath /dev/shm)"
  else
    mount -t tmpfs -o nosuid,nodev tmpfs "$TARGET/dev/shm"
  fi
  if [ "$KEEP_GOING" = "true" ]; then
    MAKEFLAGS="-k -j$(nproc)"
    TESTSUITEFLAGS="-k -j$(nproc)"
  else
    MAKEFLAGS="-j$(nproc)"
    TESTSUITEFLAGS="-j$(nproc)"
  fi
  cp /etc/inittab "$TARGET/etc/inittab"
  cp /etc/profile "$TARGET/etc/profile"
  cp /etc/inputrc "$TARGET/etc/inputrc"
  cat > "$TARGET/etc/shells" << "EOF"
# Begin /etc/shells

/bin/sh
/bin/bash

# End /etc/shells
EOF
  cp -t "$TARGET/etc/sysconfig" /etc/sysconfig/{clock,console,ifconfig.*,rc.site}
  cp /etc/resolv.conf "$TARGET/etc/resolv.conf"
  cp /etc/hosts "$TARGET/etc/hosts"
  mkdir -p "$TARGET/etc/udev/rules.d"
  cp -t "$TARGET/etc/udev/rules.d/" /etc/udev/rules.d/*
  hostname >"$TARGET/etc/hostname"
  echo "Entering chroot environment..."
  if [ "$KEEP_GOING" = "true" ]; then
    SLPKGFLAGS="--trust-all --force-install"
  else
    SLPKGFLAGS="--trust-all"
  fi
  # some packages need manual attention so use of xargs's -a switch is needed
  xargs -a "$WITH_PACKAGES"          \
    chroot "$TARGET"                 \
    /usr/bin/env -i                  \
    HOME=/root                       \
    TERM="$TERM"                     \
    PATH=/usr/bin:/usr/sbin          \
    MAKEFLAGS="$MAKEFLAGS"           \
    TESTSUITEFLAGS="$TESTSUITEFLAGS" \
    /usr/bin/sl-pkg $SLPKGFLAGS install || return 1
  umount -R "$TARGET"/{dev,proc,sys,run}
  echo "Cleaning up..."
  rm -rf "$TARGET/var/cache/sl-pkg/"* "$TARGET/root/.cache/sl-pkg/"*
  echo "Bootstrap success."
  return 0 
}

if [ -f $CONFIGFILE ]; then
  source_s /etc/sl-pkg.conf
elif [ -f ./sl-pkg.conf ]; then
  source_s ./sl-pkg.conf
else
  echo "error: no config file found"
  exit 1
fi

while [[ $# -gt 0 ]]; do
  case $1 in
    -n|--dry-run)
      DRY_RUN=true
      shift
      ;;
    -b|--build)
      DOWNLOAD_AND_BUILD=true
      shift
      ;;
    -h|--help)
      RUN_HELP=true
      shift
      ;;
    -k|--keep-going)
      KEEP_GOING=true
      FORCE_INSTALL=true
      shift
      ;;
    --trust-all)
      TRUST_ALL=true
      shift
      ;;
    --lfs-version)
      BOOTSTRAP_VERSION=$2
      shift
      shift
      ;;
    --force-install)
      FORCE_INSTALL=true
      shift
      ;;
    -*)
      echo "error: unrecognized option $1"
      echo "run $BINNAME --help for command usage"
      exit 1
      ;;
    *)
      if [ "$HAS_SPECIFIED_COMMAND" = "false" ]; then
        COMMAND=$1
        HAS_SPECIFIED_COMMAND=true
      else
        PACKAGES+=("$1")
      fi
      shift
      ;;
  esac
done

if [ "$RUN_HELP" = "true" ]; then
  print_help $COMMAND
  exit
fi

if [ "$DOWNLOAD_AND_BUILD" = "true" ] && [ "$COMMAND" != "download" ]; then
  echo "error: the --build switch is not recognized for command $COMMAND"
  exit 1
fi

if [ "$KEEP_GOING" = "true" ] && [ "$COMMAND" != "bootstrap" ]; then
  echo "error: the --keep-going switch is not recognized for command $COMMAND"
  exit 1
fi

if [ "$FORCE_INSTALL" = "true" ] && !(
  [ "$COMMAND" = "install" ] || [ "$COMMAND" = "bootstrap" ]
); then
  echo "error: the --force-install switch is not recognized for command $COMMAND"
  exit 1
fi

create_cache_dir $CACHE_DIR
create_cache_dir $USR_CACHE_DIR

case $COMMAND in
  download)
    download_cmd
    exit $?
    ;;
  version)
    echo "$BINNAME $VERSION"
    exit 0
    ;;
  install)
    install_cmd
    exit $?
    ;;
  detect)
    detect_cmd
    exit $?
    ;;
  bootstrap)
    bootstrap
    exit $?
    ;;
  *)
    echo "error: no command specified"
    echo "try running $BINNAME --help"
    exit 1
    ;;
esac
